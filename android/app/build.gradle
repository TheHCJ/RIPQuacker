import com.android.build.OutputFile

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def keystoreFile = System.getenv('KEY_PATH')
if (keystoreFile != null && !keystoreFile.isEmpty()) {
    keystoreProperties.setProperty('storePassword', System.getenv('KEY_STORE_PASSWORD'));
    keystoreProperties.setProperty('keyPassword', System.getenv('KEY_PASSWORD'));
    keystoreProperties.setProperty('keyAlias', System.getenv('KEY_ALIAS'));
    keystoreProperties.setProperty('storeFile', System.getenv('KEY_PATH'));
}

def abiCodes = [x86_64:1, 'armeabi-v7a':2, 'arm64-v8a':3]

android {
    compileSdkVersion 34

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "org.ca.squawker"
        minSdkVersion 19
        targetSdkVersion 34
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        release {
            signingConfig signingConfigs.release

            minifyEnabled = true
            shrinkResources = true

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def abiName = output.getFilter(OutputFile.ABI)
                    if (abiName == null) {
                        outputFileName = "squawker-v${defaultConfig.versionName}.apk"
                    } else {
                        outputFileName = "squawker-v${defaultConfig.versionName}_${abiName}.apk"
                    }
                    def baseAbiVersionCode = abiCodes.get(abiName)
                    if (baseAbiVersionCode != null) {
                        output.versionCodeOverride = baseAbiVersionCode + variant.versionCode
                    }
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
